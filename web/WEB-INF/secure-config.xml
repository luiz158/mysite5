<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                                http://www.springframework.org/schema/beans/spring-beans.xsd
                                http://www.springframework.org/schema/security
                                http://www.springframework.org/schema/security/spring-security.xsd">
    <!-- Spring Security 3.1부터 여러 http 태그 사용하여 서로 다른 요청 패턴에 대한 별도의 security filter chain 설정 정의 가능 -->
    <!-- 다중 http 태그 지원은 같은 애플리케이션에서 stateful과 stateless인 경로를 동시에 지원함을 의미  -->
    <!-- pattern을 생략하면 모든 요청을 매칭한다 -->
    <http pattern="/assets" security="none"/>

    <!-- SPRING SECURITY -->
    <!-- http 태그는 FilterChainProxy와 이를 사용하는 필터 빈 생성 책임 -->
    <http use-expressions="true">
        <!-- pattern의 URL 요청에 대하여 ROLE_USER 필요 -->
        <!-- 여러 개의 intercept-url 태그 사용, HTTP 메소드 지정 등 가능 -->
        <!-- filters="none"은 더이상 지원하지 않는다 -->
        <!--<intercept-url pattern="/board/**" access="ROLE_USER"/>-->
        <intercept-url pattern="/board/**" access="hasRole('USER')"/>
        <!-- 별도의 설정이 없다면 /guestbook/이 붙은 주소는 login 페이지로 리다이렉트 -->
        <intercept-url pattern="/guestbook/**" access="isAnonymous()"/>

        <!-- 로그인 페이지를 익명의 유저들이 사용할 수 있도록 설정 -->
        <!-- Spring Security 4.x XML 설정부터 use-expression="true"가 기본인데
             IS_AUTHENTICATED_ANONYMOUSLY은 expression syntax가 아니다. -->
        <!--<intercept-url pattern="/user/auth" access="IS_AUTHENTICATED_ANONYMOUSLY"/>-->
        <intercept-url pattern="/user/auth" access="isAnonymous()"/>
        <!-- 로그인 페이지 및 기본 페이지 설정 -->
        <form-login login-page="/user/auth"
                             default-target-url="/main"
                             always-use-default-target="true"/>
        <csrf request-matcher-ref="csrfRequestMatcher"/>
        <headers>
            <frame-options policy="SAMEORIGIN"/>
        </headers>
        <!-- 로그아웃 -->
        <logout />
    </http>
   <!-- <beans:bean id="csrfMatcher" name="csrfMatcher"
          class="com.cafe24.mysite5.security.csrf.CsrfRequestMatcher"/>-->

    <!--<beans:bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <beans:constructor-arg>
            <beans:list>
                <filter-chain pattern="/guestbook**" filters="securityContextPersistenceFilterWithASCFalse,
                                                    basicAuthenticationFilter,
                                                    exceptionTranslationFilter,
                                                    filterSecurityInterceptor" />
                <filter-chain pattern="/**" filters="
                                                    securityContextPersistenceFilterWithASCTrue,
                                                    formLoginFilter,
                                                    exceptionTranslationFilter,
                                                    filterSecurityInterceptor" />
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>
    <beans:bean id="filterSecurityInterceptor"
                class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor"/>-->
    <!--<bean id="csrfMatcher"
          class="org.springframework.security.config.annotation.web.configurers.CsrfConfigurer.IgnoreCsrfProtectionRegistry">
        <constructor-arg name="context" value="org.springframework.context"/>
    </bean>-->
    <!-- <bean id="csrfMatcher" class="org.springframework.security.web.util.matcher.OrRequestMatcher">
         <constructor-arg>
             <util:list value-type="org.springframework.security.web.util.matcher.RequestMatcher">
                 <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                     <constructor-arg name="pattern" value="/board/**"/>
                     <constructor-arg name="httpMethod" value="POST"/>
                 </bean>
                 <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                     <constructor-arg name="pattern" value="/board/**"/>
                     <constructor-arg name="httpMethod" value="PUT"/>
                 </bean>
                 <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                     <constructor-arg name="pattern" value="/board/**"/>
                     <constructor-arg name="httpMethod" value="DELETE"/>
                 </bean>
             </util:list>
         </constructor-arg>
     </bean>-->


    <!--<security:authentication-manager>
        <security:authentication-provider user-service-ref="myUserDetailService"/>
    </security:authentication-manager>

    <bean id="myUserDetailService"
          class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>-->

    <!-- 표준 AuthenticationProvider 빈 사용 -->
    <!-- <security:authentication-manager>
         myAuthenticationProvider는 ApplicationProvider를 구현하는 빈의 이름
         <security:authentication-provider ref='myAuthenticationProvider'/>
     </security:authentication-manager>-->

    <!-- <security:authentication-manager>
         <security:authentication-provider>
             &lt;!&ndash; user data tables가 만들어져 있어야 한다. &ndash;&gt;
             <security:jdbc-user-service data-source-ref="dataSource"/>
         </security:authentication-provider>
     </security:authentication-manager>-->
</beans:beans>